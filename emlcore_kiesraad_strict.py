"""This file was generated by xsdata, v23.8, on 2023-10-17 11:34:35

Generator: DataclassGenerator
See: https://xsdata.readthedocs.io/
"""
from dataclasses import dataclass, field
from decimal import Decimal
from enum import Enum
from typing import List, Optional, Union
from xsdata.models.datatype import XmlDate, XmlDateTime
from pyeml_bindings.emlexternals_kiesraad_strict import (
    AuthorityAddressStructure,
    ElectoralAddressStructure,
    MailingAddressStructure,
    OfficialAddressStructure,
    PersonNameStructure,
    PhysicalAddressStructure,
    PostalLocationStructure,
    ProxyAddressStructure,
    QualifyingAddressStructure,
)
from pyeml_bindings.external.emltimestamp import Timestamp
from pyeml_bindings.external.xmldsig_core_schema import Signature

__NAMESPACE__ = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class AffiliationIdentifierStructure:
    registered_name: str = field(
        metadata={
            "name": "RegisteredName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    short_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Attribute",
        }
    )
    expected_confirmation_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedConfirmationReference",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class AreaStructure:
    """
    The geographical area (and its type, such as County) covered by a contest.
    """
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class AuthorityIdentifierStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class BallotIdentifierStructure:
    ballot_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "BallotName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


class BinaryFormat(Enum):
    BMP = "bmp"
    GIF = "gif"
    JPEG = "jpeg"
    PNG = "png"
    TIFF = "tiff"


@dataclass(kw_only=True)
class ComplexDateRangeStructure:
    single_date: Union[XmlDate, XmlDateTime] = field(
        metadata={
            "name": "SingleDate",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    end: List[Union[XmlDate, XmlDateTime]] = field(
        default_factory=list,
        metadata={
            "name": "End",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "max_occurs": 2,
        }
    )
    start: Optional[Union[XmlDate, XmlDateTime]] = field(
        default=None,
        metadata={
            "name": "Start",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    type_value: str = field(
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass(kw_only=True)
class ContestIdentifierStructure:
    contest_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "ContestName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    short_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class CountMetricStructure:
    value: Decimal = field(
        metadata={
            "required": True,
        }
    )
    type_value: str = field(
        metadata={
            "name": "Type",
            "type": "Attribute",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    algorithm_id: Optional[str] = field(
        default=None,
        metadata={
            "name": "AlgorithmId",
            "type": "Attribute",
        }
    )
    position_xpath: Optional[str] = field(
        default=None,
        metadata={
            "name": "PositionXPath",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class CountingAlgorithm:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class DocumentIdentifierStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    href: str = field(
        metadata={
            "name": "Href",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass(kw_only=True)
class ElectionGroupStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass(kw_only=True)
class EventQualifierStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )


class GenderType(Enum):
    MALE = "male"
    FEMALE = "female"
    UNKNOWN = "unknown"


@dataclass(kw_only=True)
class MaxVotes:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: int = field(
        default=1,
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class MessageType:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class MessagesStructure:
    message: List["MessagesStructure.Message"] = field(
        default_factory=list,
        metadata={
            "name": "Message",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "min_occurs": 1,
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class Message:
        format: Optional[str] = field(
            default=None,
            metadata={
                "name": "Format",
                "type": "Attribute",
            }
        )
        type_value: Optional[str] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )
        lang: Optional[str] = field(
            default=None,
            metadata={
                "name": "Lang",
                "type": "Attribute",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )


@dataclass(kw_only=True)
class MinVotes:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: int = field(
        default=0,
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class NumberInSequence:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: int = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class NumberOfPositions:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: int = field(
        default=1,
        metadata={
            "required": True,
        }
    )


class PeriodStructurePermanent(Enum):
    YES = "yes"


@dataclass(kw_only=True)
class PollingDistrictStructure:
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    association: List["PollingDistrictStructure.Association"] = field(
        default_factory=list,
        metadata={
            "name": "Association",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class Association:
        value: str = field(
            default="",
            metadata={
                "required": True,
            }
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "name": "Id",
                "type": "Attribute",
            }
        )


@dataclass(kw_only=True)
class PositionStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


class ProcessingUnitStructureRole(Enum):
    NEXT_RECEIVER = "next receiver"
    PREVIOUS_SENDER = "previous sender"
    RECEIVER = "receiver"
    SENDER = "sender"
    VALUE = ""


@dataclass(kw_only=True)
class ProposalIdentifierStructure:
    proposal_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProposalName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    short_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Attribute",
        }
    )
    expected_confirmation_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedConfirmationReference",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ProposalItemStructure:
    proposal_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProposalText",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    selection_text: Optional[str] = field(
        default=None,
        metadata={
            "name": "SelectionText",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    referendum_option_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ReferendumOptionIdentifier",
            "type": "Attribute",
        }
    )
    proposal_identifier: Optional[str] = field(
        default=None,
        metadata={
            "name": "ProposalIdentifier",
            "type": "Attribute",
        }
    )
    lang: Optional[str] = field(
        default=None,
        metadata={
            "name": "Lang",
            "type": "Attribute",
        }
    )


class ProposerStructureCategory(Enum):
    PRIMARY = "primary"
    SECONDARY = "secondary"
    OTHER = "other"


@dataclass(kw_only=True)
class ReferendumOptionIdentifierStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    short_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Attribute",
        }
    )
    expected_confirmation_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedConfirmationReference",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ReportingUnitIdentifierStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ResultsReportedStructure:
    status: "ResultsReportedStructure.Status" = field(
        metadata={
            "name": "Status",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    current_status: Optional[str] = field(
        default=None,
        metadata={
            "name": "CurrentStatus",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class Status:
        channel_id: Optional[str] = field(
            default=None,
            metadata={
                "name": "ChannelID",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        notes: Optional[str] = field(
            default=None,
            metadata={
                "name": "Notes",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        date_time: Optional[XmlDateTime] = field(
            default=None,
            metadata={
                "name": "DateTime",
                "type": "Attribute",
            }
        )
        type_value: Optional[str] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )


@dataclass(kw_only=True)
class ScrutinyRequirement:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class SequenceNumber:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: int = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class SimpleDateRangeStructure:
    start: Union[XmlDate, XmlDateTime] = field(
        metadata={
            "name": "Start",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    end: Union[XmlDate, XmlDateTime] = field(
        metadata={
            "name": "End",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )


@dataclass(kw_only=True)
class SupporterIdentifierStructure:
    supporter_name: str = field(
        metadata={
            "name": "SupporterName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    supporter_abbreviation: str = field(
        metadata={
            "name": "SupporterAbbreviation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    registered_full_name: str = field(
        metadata={
            "name": "RegisteredFullName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    alternative_name: str = field(
        metadata={
            "name": "AlternativeName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class TransactionId:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class VtokenStructure:
    class Meta:
        name = "VTokenStructure"

    component: List["VtokenStructure.Component"] = field(
        default_factory=list,
        metadata={
            "name": "Component",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "min_occurs": 1,
        }
    )

    @dataclass(kw_only=True)
    class Component:
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )


class VoterInformationStructureGender(Enum):
    MALE = "male"
    FEMALE = "female"
    UNKNOWN = "unknown"


class VotingChannelType(Enum):
    SMS = "SMS"
    WAP = "WAP"
    DIGITAL_TV = "digitalTV"
    INTERNET = "internet"
    KIOSK = "kiosk"
    POLLING = "polling"
    POSTAL = "postal"
    TELEPHONE = "telephone"
    OTHER = "other"


class VotingMethodType(Enum):
    AMS = "AMS"
    FPP = "FPP"
    IRV = "IRV"
    NOR = "NOR"
    OPV = "OPV"
    RCV = "RCV"
    SPV = "SPV"
    STV = "STV"
    CUMULATIVE = "cumulative"
    APPROVAL = "approval"
    BLOCK = "block"
    SUPPORTERLIST = "supporterlist"
    PARTISAN = "partisan"
    SUPPLEMENTARYVOTE = "supplementaryvote"
    OTHER = "other"


class WriteInType(Enum):
    ALLOWED = "allowed"
    NONE = "none"
    STRIKEOUT = "strikeout"
    OTHER = "other"


class YesNoType(Enum):
    NO = "no"
    YES = "yes"


@dataclass(kw_only=True)
class Accepted:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: YesNoType = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class AffiliationIdentifier(AffiliationIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class AgentIdentifierStructure:
    agent_name: PersonNameStructure = field(
        metadata={
            "name": "AgentName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class Area(AreaStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class AuthorityIdentifier(AuthorityIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class BallotIdentifier(BallotIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class BallotIdentifierRangeStructure:
    start: BallotIdentifierStructure = field(
        metadata={
            "name": "Start",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    end: BallotIdentifierStructure = field(
        metadata={
            "name": "End",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    colour: Optional[str] = field(
        default=None,
        metadata={
            "name": "Colour",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class BinaryItemStructure:
    url: Optional[str] = field(
        default=None,
        metadata={
            "name": "URL",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    binary: Optional["BinaryItemStructure.Binary"] = field(
        default=None,
        metadata={
            "name": "Binary",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    item_type: Optional[str] = field(
        default=None,
        metadata={
            "name": "ItemType",
            "type": "Attribute",
        }
    )
    verified: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Verified",
            "type": "Attribute",
        }
    )
    problem: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Problem",
            "type": "Attribute",
        }
    )
    notes: Optional[str] = field(
        default=None,
        metadata={
            "name": "Notes",
            "type": "Attribute",
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "name": "Role",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class Binary:
        value: bytes = field(
            metadata={
                "required": True,
                "format": "base64",
            }
        )
        format: BinaryFormat = field(
            metadata={
                "name": "Format",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass(kw_only=True)
class CandidateIdentifierStructure:
    candidate_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "CandidateName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "max_length": 70,
        }
    )
    known_as: Optional[str] = field(
        default=None,
        metadata={
            "name": "KnownAs",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    candidate_gender: Optional[GenderType] = field(
        default=None,
        metadata={
            "name": "CandidateGender",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    short_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    short_code_attribute: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Attribute",
        }
    )
    expected_confirmation_reference: Optional[str] = field(
        default=None,
        metadata={
            "name": "ExpectedConfirmationReference",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ContestIdentifier(ContestIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class CountMetric(CountMetricStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class CountQualifierStructure:
    simulation: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Simulation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    final: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Final",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    extrapolation: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Extrapolation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    partial: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Partial",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    previous: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Previous",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class DocumentIdentifier(DocumentIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ElectionIdentifierStructure:
    election_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "ElectionName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    election_group: Optional[ElectionGroupStructure] = field(
        default=None,
        metadata={
            "name": "ElectionGroup",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    election_category: Optional[str] = field(
        default=None,
        metadata={
            "name": "ElectionCategory",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    short_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "ShortCode",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ElectionStatement(MessagesStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class EmailStructure:
    value: str = field(
        default="",
        metadata={
            "required": True,
            "max_length": 129,
            "pattern": r"[^@]+@[^@]+",
        }
    )
    preferred: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Preferred",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class EventIdentifierStructure:
    event_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "EventName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    event_qualifier: Optional[EventQualifierStructure] = field(
        default=None,
        metadata={
            "name": "EventQualifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class EventQualifier(EventQualifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Gender:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: GenderType = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class PersonName(PersonNameStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class PollingDistrict(PollingDistrictStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Position(PositionStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class PreviousElectoralAddress(ElectoralAddressStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ProcessingUnitStructure:
    name: Optional[str] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    role: ProcessingUnitStructureRole = field(
        metadata={
            "name": "Role",
            "type": "Attribute",
            "required": True,
        }
    )


@dataclass(kw_only=True)
class Profile(MessagesStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ProposalIdentifier(ProposalIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ProposalItem(ProposalItemStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ReferendumOptionIdentifier(ReferendumOptionIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ReportingUnitIdentifier(ReportingUnitIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class SealStructure:
    signature: Optional[Signature] = field(
        default=None,
        metadata={
            "name": "Signature",
            "type": "Element",
            "namespace": "http://www.w3.org/2000/09/xmldsig#",
        }
    )
    timestamp: Optional[Timestamp] = field(
        default=None,
        metadata={
            "name": "Timestamp",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml:ts",
        }
    )
    other_seal: Optional["SealStructure.OtherSeal"] = field(
        default=None,
        metadata={
            "name": "OtherSeal",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )

    @dataclass(kw_only=True)
    class OtherSeal:
        other_element: Optional[object] = field(
            default=None,
            metadata={
                "type": "Wildcard",
                "namespace": "##other",
            }
        )
        type_value: str = field(
            metadata={
                "name": "Type",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass(kw_only=True)
class SupporterIdentifier(SupporterIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class TelephoneStructure:
    number: str = field(
        metadata={
            "name": "Number",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
            "min_length": 1,
            "max_length": 35,
            "pattern": r"\+?[0-9\(\)\-\s]{1,35}",
        }
    )
    extension: Optional[str] = field(
        default=None,
        metadata={
            "name": "Extension",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "min_length": 1,
            "max_length": 6,
            "pattern": r"[0-9]{1,6}",
        }
    )
    preferred: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Preferred",
            "type": "Attribute",
        }
    )
    mobile: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Mobile",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class Vtoken(VtokenStructure):
    class Meta:
        name = "VToken"
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class VoterName(PersonNameStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class VotingChannel:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: VotingChannelType = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class VotingMethod:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: VotingMethodType = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class WriteIn:
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"

    value: WriteInType = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class AgentIdentifier(AgentIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class AuditInformationStructure:
    voting_channel: Optional[VotingChannelType] = field(
        default=None,
        metadata={
            "name": "VotingChannel",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    processing_units: Optional["AuditInformationStructure.ProcessingUnits"] = field(
        default=None,
        metadata={
            "name": "ProcessingUnits",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )

    @dataclass(kw_only=True)
    class ProcessingUnits:
        originating_device: Optional[ProcessingUnitStructure] = field(
            default=None,
            metadata={
                "name": "OriginatingDevice",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        gateway: Optional[ProcessingUnitStructure] = field(
            default=None,
            metadata={
                "name": "Gateway",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        voting_system: Optional[ProcessingUnitStructure] = field(
            default=None,
            metadata={
                "name": "VotingSystem",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        counting_system: Optional[ProcessingUnitStructure] = field(
            default=None,
            metadata={
                "name": "CountingSystem",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        vtoken_logging_system: Optional[ProcessingUnitStructure] = field(
            default=None,
            metadata={
                "name": "VTokenLoggingSystem",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        seal_logging_system: Optional[ProcessingUnitStructure] = field(
            default=None,
            metadata={
                "name": "SealLoggingSystem",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        other: List["AuditInformationStructure.ProcessingUnits.Other"] = field(
            default_factory=list,
            metadata={
                "name": "Other",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )

        @dataclass(kw_only=True)
        class Other(ProcessingUnitStructure):
            type_value: str = field(
                metadata={
                    "name": "Type",
                    "type": "Attribute",
                    "required": True,
                }
            )


@dataclass(kw_only=True)
class BallotIdentifierRange(BallotIdentifierRangeStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class CandidateIdentifier(CandidateIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ContactDetailsStructure:
    mailing_address: Optional[MailingAddressStructure] = field(
        default=None,
        metadata={
            "name": "MailingAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    email: List[EmailStructure] = field(
        default_factory=list,
        metadata={
            "name": "Email",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    telephone: List[TelephoneStructure] = field(
        default_factory=list,
        metadata={
            "name": "Telephone",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    fax: List[TelephoneStructure] = field(
        default_factory=list,
        metadata={
            "name": "Fax",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    preferred_contact: Optional[str] = field(
        default=None,
        metadata={
            "name": "PreferredContact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class CountQualifier(CountQualifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ElectionIdentifier(ElectionIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class EventIdentifier(EventIdentifierStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class LogoStructure(BinaryItemStructure):
    pass


@dataclass(kw_only=True)
class PollingPlaceStructure:
    physical_location: Optional["PollingPlaceStructure.PhysicalLocation"] = field(
        default=None,
        metadata={
            "name": "PhysicalLocation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    postal_location: Optional["PollingPlaceStructure.PostalLocation"] = field(
        default=None,
        metadata={
            "name": "PostalLocation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    electronic_location: Optional["PollingPlaceStructure.ElectronicLocation"] = field(
        default=None,
        metadata={
            "name": "ElectronicLocation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_location: Optional["PollingPlaceStructure.OtherLocation"] = field(
        default=None,
        metadata={
            "name": "OtherLocation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    time_available: List["PollingPlaceStructure.TimeAvailable"] = field(
        default_factory=list,
        metadata={
            "name": "TimeAvailable",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    results_reported: List[ResultsReportedStructure] = field(
        default_factory=list,
        metadata={
            "name": "ResultsReported",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    channel: VotingChannelType = field(
        metadata={
            "name": "Channel",
            "type": "Attribute",
            "required": True,
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class TimeAvailable:
        start: XmlDateTime = field(
            metadata={
                "name": "Start",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        end: XmlDateTime = field(
            metadata={
                "name": "End",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )

    @dataclass(kw_only=True)
    class PhysicalLocation:
        address: PhysicalAddressStructure = field(
            metadata={
                "name": "Address",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        polling_station: List["PollingPlaceStructure.PhysicalLocation.PollingStation"] = field(
            default_factory=list,
            metadata={
                "name": "PollingStation",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        map: Optional[BinaryItemStructure] = field(
            default=None,
            metadata={
                "name": "Map",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "name": "Id",
                "type": "Attribute",
            }
        )

        @dataclass(kw_only=True)
        class PollingStation:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                }
            )
            id: Optional[str] = field(
                default=None,
                metadata={
                    "name": "Id",
                    "type": "Attribute",
                }
            )

    @dataclass(kw_only=True)
    class PostalLocation(PostalLocationStructure):
        id: Optional[str] = field(
            default=None,
            metadata={
                "name": "Id",
                "type": "Attribute",
            }
        )
        display_order: Optional[int] = field(
            default=None,
            metadata={
                "name": "DisplayOrder",
                "type": "Attribute",
            }
        )

    @dataclass(kw_only=True)
    class ElectronicLocation:
        value: str = field(
            default="",
            metadata={
                "required": True,
            }
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "name": "Id",
                "type": "Attribute",
            }
        )
        display_order: Optional[int] = field(
            default=None,
            metadata={
                "name": "DisplayOrder",
                "type": "Attribute",
            }
        )

    @dataclass(kw_only=True)
    class OtherLocation:
        value: str = field(
            default="",
            metadata={
                "required": True,
            }
        )
        id: Optional[str] = field(
            default=None,
            metadata={
                "name": "Id",
                "type": "Attribute",
            }
        )
        display_order: Optional[int] = field(
            default=None,
            metadata={
                "name": "DisplayOrder",
                "type": "Attribute",
            }
        )


@dataclass(kw_only=True)
class ProposalStructure:
    proposal_identifier: Optional[ProposalIdentifier] = field(
        default=None,
        metadata={
            "name": "ProposalIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    description: Optional[MessagesStructure] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    options: Optional["ProposalStructure.Options"] = field(
        default=None,
        metadata={
            "name": "Options",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    proposal_item: Optional[ProposalItem] = field(
        default=None,
        metadata={
            "name": "ProposalItem",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    type_value: Optional[str] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class Options:
        referendum_option_identifier: List[ReferendumOptionIdentifier] = field(
            default_factory=list,
            metadata={
                "name": "ReferendumOptionIdentifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "min_occurs": 1,
            }
        )


@dataclass(kw_only=True)
class Seal(SealStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class VtokenQualifiedStructure(VtokenStructure):
    class Meta:
        name = "VTokenQualifiedStructure"

    reason: "VtokenQualifiedStructure.Reason" = field(
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    vtoken: Optional[Vtoken] = field(
        default=None,
        metadata={
            "name": "VToken",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )

    @dataclass(kw_only=True)
    class Reason:
        value: str = field(
            default="",
            metadata={
                "required": True,
            }
        )
        type_value: str = field(
            metadata={
                "name": "Type",
                "type": "Attribute",
                "required": True,
            }
        )


@dataclass(kw_only=True)
class AuditInformation(AuditInformationStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ContactDetails(ContactDetailsStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class InternalGenericCommunicationStructure:
    from_value: Optional["InternalGenericCommunicationStructure.From"] = field(
        default=None,
        metadata={
            "name": "From",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    to: Optional["InternalGenericCommunicationStructure.To"] = field(
        default=None,
        metadata={
            "name": "To",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    event_identifier: Optional[EventIdentifier] = field(
        default=None,
        metadata={
            "name": "EventIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    election_identifier: Optional[ElectionIdentifier] = field(
        default=None,
        metadata={
            "name": "ElectionIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    contest_identifier: Optional[ContestIdentifier] = field(
        default=None,
        metadata={
            "name": "ContestIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    messages: Optional[MessagesStructure] = field(
        default=None,
        metadata={
            "name": "Messages",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )

    @dataclass(kw_only=True)
    class From:
        target_namespace_element: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##targetNamespace",
            }
        )

    @dataclass(kw_only=True)
    class To:
        target_namespace_element: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##targetNamespace",
            }
        )


@dataclass(kw_only=True)
class Logo(LogoStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class NominatingOfficerStructure:
    name: PersonNameStructure = field(
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    contact: ContactDetailsStructure = field(
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class PeriodStructure:
    dates: Optional["PeriodStructure.Dates"] = field(
        default=None,
        metadata={
            "name": "Dates",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    event: List["PeriodStructure.Event"] = field(
        default_factory=list,
        metadata={
            "name": "Event",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    permanent: Optional[PeriodStructurePermanent] = field(
        default=None,
        metadata={
            "name": "Permanent",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )

    @dataclass(kw_only=True)
    class Dates:
        start: Optional[XmlDate] = field(
            default=None,
            metadata={
                "name": "Start",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )
        end: XmlDate = field(
            metadata={
                "name": "End",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )

    @dataclass(kw_only=True)
    class Event:
        event_identifier: EventIdentifier = field(
            metadata={
                "name": "EventIdentifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        election_identifier: List[ElectionIdentifier] = field(
            default_factory=list,
            metadata={
                "name": "ElectionIdentifier",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )


@dataclass(kw_only=True)
class PollingPlace(PollingPlaceStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Proposal(ProposalStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ProposerStructure:
    name: PersonNameStructure = field(
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    contact: Optional[ContactDetailsStructure] = field(
        default=None,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    job_title: Optional[str] = field(
        default=None,
        metadata={
            "name": "JobTitle",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DateOfBirth",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    id: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Id",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    category: Optional[ProposerStructureCategory] = field(
        default=None,
        metadata={
            "name": "Category",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ResponsibleOfficerStructure:
    responsibility: str = field(
        metadata={
            "name": "Responsibility",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    name: List[PersonNameStructure] = field(
        default_factory=list,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "min_occurs": 1,
            "max_occurs": 2,
            "sequence": 1,
        }
    )
    contact: Optional[ContactDetailsStructure] = field(
        default=None,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class VtokenQualified(VtokenQualifiedStructure):
    class Meta:
        name = "VTokenQualified"
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class AffiliationStructure:
    affiliation_identifier: AffiliationIdentifier = field(
        metadata={
            "name": "AffiliationIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    type_value: str = field(
        metadata={
            "name": "Type",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    description: Optional[str] = field(
        default=None,
        metadata={
            "name": "Description",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    logo: List[Logo] = field(
        default_factory=list,
        metadata={
            "name": "Logo",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class NominatingOfficer(NominatingOfficerStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Period(PeriodStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Proposer(ProposerStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ResponsibleOfficer(ResponsibleOfficerStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class SupporterStructure:
    supporter_identifier: SupporterIdentifier = field(
        metadata={
            "name": "SupporterIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    logo: List[Logo] = field(
        default_factory=list,
        metadata={
            "name": "Logo",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class VoterIdentificationStructure:
    """
    :ivar voter_name:
    :ivar electoral_address: This is the address that gives the voter
        the right to vote
    :ivar previous_electoral_address:
    :ivar vtoken:
    :ivar vtoken_qualified:
    :ivar voter_id:
    :ivar voter_signature:
    :ivar other_element:
    :ivar display_order:
    :ivar id:
    """
    voter_name: Optional[VoterName] = field(
        default=None,
        metadata={
            "name": "VoterName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    electoral_address: Optional[ElectoralAddressStructure] = field(
        default=None,
        metadata={
            "name": "ElectoralAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    previous_electoral_address: Optional[ElectoralAddressStructure] = field(
        default=None,
        metadata={
            "name": "PreviousElectoralAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    vtoken: Optional[Vtoken] = field(
        default=None,
        metadata={
            "name": "VToken",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    vtoken_qualified: Optional[VtokenQualified] = field(
        default=None,
        metadata={
            "name": "VTokenQualified",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    voter_id: List[str] = field(
        default_factory=list,
        metadata={
            "name": "VoterId",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    voter_signature: Optional[BinaryItemStructure] = field(
        default=None,
        metadata={
            "name": "VoterSignature",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    id: Optional[object] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class Affiliation(AffiliationStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ChannelStructure:
    preferred_channel: List["ChannelStructure.PreferredChannel"] = field(
        default_factory=list,
        metadata={
            "name": "PreferredChannel",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    period: Optional[Period] = field(
        default=None,
        metadata={
            "name": "Period",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )

    @dataclass(kw_only=True)
    class PreferredChannel:
        value: VotingChannelType = field(
            metadata={
                "required": True,
            }
        )
        fixed: Optional[YesNoType] = field(
            default=None,
            metadata={
                "name": "Fixed",
                "type": "Attribute",
            }
        )


@dataclass(kw_only=True)
class Endorsement(SupporterStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ManagingAuthorityStructure:
    authority_identifier: AuthorityIdentifier = field(
        metadata={
            "name": "AuthorityIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    authority_address: AuthorityAddressStructure = field(
        metadata={
            "name": "AuthorityAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    responsible_officer: List[ResponsibleOfficer] = field(
        default_factory=list,
        metadata={
            "name": "ResponsibleOfficer",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    logo: Optional[Logo] = field(
        default=None,
        metadata={
            "name": "Logo",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class AgentStructure:
    agent_identifier: AgentIdentifier = field(
        metadata={
            "name": "AgentIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    affiliation: Optional[Affiliation] = field(
        default=None,
        metadata={
            "name": "Affiliation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    official_address: Optional[OfficialAddressStructure] = field(
        default=None,
        metadata={
            "name": "OfficialAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    contact: Optional[ContactDetailsStructure] = field(
        default=None,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    role: Optional[str] = field(
        default=None,
        metadata={
            "name": "Role",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class Channel(ChannelStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class ManagingAuthority(ManagingAuthorityStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Agent(AgentStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Emlstructure:
    class Meta:
        name = "EMLstructure"

    transaction_id: str = field(
        metadata={
            "name": "TransactionId",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    sequence_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "SequenceNumber",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    number_in_sequence: Optional[int] = field(
        default=None,
        metadata={
            "name": "NumberInSequence",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    sequenced_element_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "SequencedElementName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    additional_validation: Optional["Emlstructure.AdditionalValidation"] = field(
        default=None,
        metadata={
            "name": "AdditionalValidation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    message_language: Optional[str] = field(
        default=None,
        metadata={
            "name": "MessageLanguage",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    requested_response_language: Optional[str] = field(
        default=None,
        metadata={
            "name": "RequestedResponseLanguage",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    managing_authority: Optional[ManagingAuthority] = field(
        default=None,
        metadata={
            "name": "ManagingAuthority",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    issue_date: Optional[Union[XmlDate, XmlDateTime]] = field(
        default=None,
        metadata={
            "name": "IssueDate",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    display: List["Emlstructure.Display"] = field(
        default_factory=list,
        metadata={
            "name": "Display",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    seal: Optional[Seal] = field(
        default=None,
        metadata={
            "name": "Seal",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
        }
    )
    schema_version: str = field(
        metadata={
            "name": "SchemaVersion",
            "type": "Attribute",
            "required": True,
        }
    )

    @dataclass(kw_only=True)
    class AdditionalValidation:
        location: str = field(
            metadata={
                "name": "Location",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        type_value: str = field(
            metadata={
                "name": "Type",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )

    @dataclass(kw_only=True)
    class Display:
        stylesheet: List["Emlstructure.Display.Stylesheet"] = field(
            default_factory=list,
            metadata={
                "name": "Stylesheet",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "min_occurs": 1,
            }
        )
        format: Optional[str] = field(
            default=None,
            metadata={
                "name": "Format",
                "type": "Attribute",
            }
        )

        @dataclass(kw_only=True)
        class Stylesheet:
            value: str = field(
                default="",
                metadata={
                    "required": True,
                }
            )
            type_value: str = field(
                metadata={
                    "name": "Type",
                    "type": "Attribute",
                    "required": True,
                }
            )


@dataclass(kw_only=True)
class ProxyStructure:
    position: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Position",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "max_occurs": 2,
        }
    )
    name: Optional[PersonNameStructure] = field(
        default=None,
        metadata={
            "name": "Name",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    address: Optional[ProxyAddressStructure] = field(
        default=None,
        metadata={
            "name": "Address",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DateOfBirth",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    qualification: Optional[str] = field(
        default=None,
        metadata={
            "name": "Qualification",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    reason: Optional[str] = field(
        default=None,
        metadata={
            "name": "Reason",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    period: Optional[Period] = field(
        default=None,
        metadata={
            "name": "Period",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    proxy_agrees: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "ProxyAgrees",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    preferred_language: Optional[str] = field(
        default=None,
        metadata={
            "name": "PreferredLanguage",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    channel: List[Channel] = field(
        default_factory=list,
        metadata={
            "name": "Channel",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    vtoken: Optional[Vtoken] = field(
        default=None,
        metadata={
            "name": "VToken",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    vtoken_qualified: Optional[VtokenQualified] = field(
        default=None,
        metadata={
            "name": "VTokenQualified",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class CandidateStructure:
    candidate_identifier: Optional[CandidateIdentifier] = field(
        default=None,
        metadata={
            "name": "CandidateIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    candidate_full_name: Optional[PersonNameStructure] = field(
        default=None,
        metadata={
            "name": "CandidateFullName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DateOfBirth",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    age: Optional[int] = field(
        default=None,
        metadata={
            "name": "Age",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    gender: Optional[GenderType] = field(
        default=None,
        metadata={
            "name": "Gender",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    qualifying_address: Optional[QualifyingAddressStructure] = field(
        default=None,
        metadata={
            "name": "QualifyingAddress",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    contact: Optional[ContactDetailsStructure] = field(
        default=None,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    affiliation: Optional[Affiliation] = field(
        default=None,
        metadata={
            "name": "Affiliation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    logo: List[Logo] = field(
        default_factory=list,
        metadata={
            "name": "Logo",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    profession: Optional[str] = field(
        default=None,
        metadata={
            "name": "Profession",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    agent: List[Agent] = field(
        default_factory=list,
        metadata={
            "name": "Agent",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    photo: Optional[BinaryItemStructure] = field(
        default=None,
        metadata={
            "name": "Photo",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    profile: Optional[Profile] = field(
        default=None,
        metadata={
            "name": "Profile",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    election_statement: Optional[ElectionStatement] = field(
        default=None,
        metadata={
            "name": "ElectionStatement",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    proposal_item: Optional[ProposalItem] = field(
        default=None,
        metadata={
            "name": "ProposalItem",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )
    independent: Optional[YesNoType] = field(
        default=None,
        metadata={
            "name": "Independent",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class Proxy(ProxyStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class Candidate(CandidateStructure):
    class Meta:
        namespace = "urn:oasis:names:tc:evs:schema:eml"


@dataclass(kw_only=True)
class IncomingGenericCommunicationStructure:
    voter: "IncomingGenericCommunicationStructure.Voter" = field(
        metadata={
            "name": "Voter",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "required": True,
        }
    )
    recipient: Optional[ResponsibleOfficerStructure] = field(
        default=None,
        metadata={
            "name": "Recipient",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    event_identifier: Optional[EventIdentifier] = field(
        default=None,
        metadata={
            "name": "EventIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    election_identifier: Optional[ElectionIdentifier] = field(
        default=None,
        metadata={
            "name": "ElectionIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    contest_identifier: Optional[ContestIdentifier] = field(
        default=None,
        metadata={
            "name": "ContestIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    messages: Optional[MessagesStructure] = field(
        default=None,
        metadata={
            "name": "Messages",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )

    @dataclass(kw_only=True)
    class Voter:
        voter_identification: VoterIdentificationStructure = field(
            metadata={
                "name": "VoterIdentification",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        voter_contact: ContactDetailsStructure = field(
            metadata={
                "name": "VoterContact",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        proxy: Optional[Proxy] = field(
            default=None,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )


@dataclass(kw_only=True)
class OutgoingGenericCommunicationStructure:
    """
    Note that this can include multiple voters to allow communication with a
    distributor.
    """
    voter: List["OutgoingGenericCommunicationStructure.Voter"] = field(
        default_factory=list,
        metadata={
            "name": "Voter",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
            "min_occurs": 1,
        }
    )
    event_identifier: Optional[EventIdentifier] = field(
        default=None,
        metadata={
            "name": "EventIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    election_identifier: Optional[ElectionIdentifier] = field(
        default=None,
        metadata={
            "name": "ElectionIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    contest_identifier: Optional[ContestIdentifier] = field(
        default=None,
        metadata={
            "name": "ContestIdentifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    return_to: Optional[ResponsibleOfficerStructure] = field(
        default=None,
        metadata={
            "name": "ReturnTo",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    messages: Optional[MessagesStructure] = field(
        default=None,
        metadata={
            "name": "Messages",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )

    @dataclass(kw_only=True)
    class Voter:
        voter_identification: VoterIdentificationStructure = field(
            metadata={
                "name": "VoterIdentification",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        voter_contact: ContactDetailsStructure = field(
            metadata={
                "name": "VoterContact",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
                "required": True,
            }
        )
        proxy: Optional[Proxy] = field(
            default=None,
            metadata={
                "name": "Proxy",
                "type": "Element",
                "namespace": "urn:oasis:names:tc:evs:schema:eml",
            }
        )


@dataclass(kw_only=True)
class VoterInformationStructure:
    """
    :ivar contact:
    :ivar date_of_birth:
    :ivar place_of_birth:
    :ivar effective_date_added:
    :ivar effective_date_removed:
    :ivar preferred_language:
    :ivar channel:
    :ivar qualifier: e.g. military or other factor that may affect right
        to vote or how votes are managed
    :ivar check_box:
    :ivar eligibility: The election types for which the voter is
        eligible.
    :ivar polling_district:
    :ivar polling_place:
    :ivar affiliation:
    :ivar gender:
    :ivar nationality:
    :ivar ethnicity:
    :ivar special_request:
    :ivar proxy:
    :ivar further_information:
    :ivar other_element:
    :ivar id:
    :ivar display_order:
    """
    contact: List["VoterInformationStructure.Contact"] = field(
        default_factory=list,
        metadata={
            "name": "Contact",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    date_of_birth: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "DateOfBirth",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    place_of_birth: Optional[str] = field(
        default=None,
        metadata={
            "name": "PlaceOfBirth",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    effective_date_added: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EffectiveDateAdded",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    effective_date_removed: Optional[XmlDate] = field(
        default=None,
        metadata={
            "name": "EffectiveDateRemoved",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    preferred_language: Optional[str] = field(
        default=None,
        metadata={
            "name": "PreferredLanguage",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    channel: List[Channel] = field(
        default_factory=list,
        metadata={
            "name": "Channel",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    qualifier: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Qualifier",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    check_box: List["VoterInformationStructure.CheckBox"] = field(
        default_factory=list,
        metadata={
            "name": "CheckBox",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    eligibility: List[str] = field(
        default_factory=list,
        metadata={
            "name": "Eligibility",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    polling_district: Optional[PollingDistrict] = field(
        default=None,
        metadata={
            "name": "PollingDistrict",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    polling_place: List[PollingPlace] = field(
        default_factory=list,
        metadata={
            "name": "PollingPlace",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    affiliation: Optional[str] = field(
        default=None,
        metadata={
            "name": "Affiliation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    gender: Optional[VoterInformationStructureGender] = field(
        default=None,
        metadata={
            "name": "Gender",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    nationality: Optional[str] = field(
        default=None,
        metadata={
            "name": "Nationality",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    ethnicity: Optional[str] = field(
        default=None,
        metadata={
            "name": "Ethnicity",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    special_request: List[str] = field(
        default_factory=list,
        metadata={
            "name": "SpecialRequest",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    proxy: List[Proxy] = field(
        default_factory=list,
        metadata={
            "name": "Proxy",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    further_information: Optional[MessagesStructure] = field(
        default=None,
        metadata={
            "name": "FurtherInformation",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:evs:schema:eml",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
        }
    )
    display_order: Optional[int] = field(
        default=None,
        metadata={
            "name": "DisplayOrder",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class Contact(ContactDetailsStructure):
        election_id: Optional[str] = field(
            default=None,
            metadata={
                "name": "ElectionId",
                "type": "Attribute",
            }
        )

    @dataclass(kw_only=True)
    class CheckBox:
        value: YesNoType = field(
            metadata={
                "required": True,
            }
        )
        type_value: str = field(
            metadata={
                "name": "Type",
                "type": "Attribute",
                "required": True,
            }
        )
