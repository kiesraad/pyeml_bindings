"""This file was generated by xsdata, v23.8, on 2023-10-17 11:34:35

Generator: DataclassGenerator
See: https://xsdata.readthedocs.io/
"""
from dataclasses import dataclass, field
from enum import Enum
from typing import List, Optional
from xsdata.models.datatype import XmlDate, XmlDateTime

__NAMESPACE__ = "http://www.kiesraad.nl/extensions"


class AffiliationType(Enum):
    """
    Restricts the basic type to the allowed values for the affiliation type.
    """
    LIJSTENGROEP = "lijstengroep"
    STEL_GELIJKLUIDENDE_LIJSTEN = "stel gelijkluidende lijsten"
    OP_ZICHZELF_STAANDE_LIJST = "op zichzelf staande lijst"


class CommitteeCategoryType(Enum):
    CSB = "CSB"
    HSB = "HSB"
    PROV_SB = "PROV_SB"
    PSB = "PSB"


@dataclass(kw_only=True)
class Contest:
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
            "pattern": r"[1-9]\d*|geen|alle|M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})",
        }
    )


@dataclass(kw_only=True)
class CreatedByAuthority:
    """
    Instance which created a data set on behalf of another (only if different!)
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    id: str = field(
        metadata={
            "name": "Id",
            "type": "Attribute",
            "required": True,
            "min_length": 3,
            "pattern": r"CSB|((HSB|SB)\d+)|(\d{4})",
        }
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        }
    )


@dataclass(kw_only=True)
class CreationDateTime:
    """
    Date and time of the last modification of the data which was used to create the
    EML file.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: XmlDateTime = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class DateOfBirthAnnex:
    """
    Use this instead of DateOfBirth when day, month and/or year is unknown, e.g.
    XX-05-1976, XX-XX-1964, XX-XX-XXXX.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "pattern": r"(XX-(XX|\d[1-9]|[1-9]0)-([1-9]\d{3}|\d[1-9]\d\d|\d\d[1-9]\d|\d{3}[1-9])|XX-XX-XXXX)",
        }
    )


class ElectionCategoryType(Enum):
    """
    Restricts the basic type to the allowed values for the election category
    (election type abreviation)
    """
    EK = "EK"
    TK = "TK"
    EP = "EP"
    PS = "PS"
    AB = "AB"
    GR = "GR"
    BC = "BC"
    GC = "GC"
    ER = "ER"
    NR = "NR"
    PR = "PR"
    LR = "LR"
    IR = "IR"


@dataclass(kw_only=True)
class ElectionDate:
    """
    Election date.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: XmlDate = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class ElectionDomain:
    """The (top level) region where the election takes place.

    Optional. Only needed if the ElectionDomain is part of the election
    name, e.g. election of the council of a municipality or province.
    Not needed e.g. for Tweede Kamer or European Parliament.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )
    id: Optional[str] = field(
        default=None,
        metadata={
            "name": "Id",
            "type": "Attribute",
            "pattern": r"\d{4}|([12]?[0-9])",
        }
    )


class ElectionSubcategoryType(Enum):
    """
    :cvar PS1: Provinciale Staaten, one electoral district
    :cvar PS2: Provinciale Staaten, more than one electoral district
    :cvar AB1: Water council elections, less than 19 seats
    :cvar AB2: Water council elections, 19 seats or more
    :cvar GR1: gemeenteraad, less than 19 seats
    :cvar GR2: gemeenteraad, 19 seats or more
    :cvar BC: bestuurscommissie (Amsterdam)
    :cvar GC: gebiedscommissie (Rotterdam)
    :cvar ER1: eilandsraad, has always less than 19 seats
    :cvar TK:
    :cvar EK:
    :cvar EP:
    :cvar NR:
    :cvar PR:
    :cvar LR:
    :cvar IR:
    """
    PS1 = "PS1"
    PS2 = "PS2"
    AB1 = "AB1"
    AB2 = "AB2"
    GR1 = "GR1"
    GR2 = "GR2"
    BC = "BC"
    GC = "GC"
    ER1 = "ER1"
    TK = "TK"
    EK = "EK"
    EP = "EP"
    NR = "NR"
    PR = "PR"
    LR = "LR"
    IR = "IR"


@dataclass(kw_only=True)
class LivingAddressType:
    locality_name: str = field(
        metadata={
            "name": "LocalityName",
            "type": "Element",
            "namespace": "http://www.kiesraad.nl/extensions",
            "required": True,
        }
    )
    country_name_code: Optional[str] = field(
        default=None,
        metadata={
            "name": "CountryNameCode",
            "type": "Element",
            "namespace": "http://www.kiesraad.nl/extensions",
        }
    )


@dataclass(kw_only=True)
class NationalIdentificationNumber:
    """Number identifying a person in the National administration.

    For the Netherlands, this is the Burgerservicenummer (BSN).
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class NominationDate:
    """
    Date of the proposition of the candidate list (filing of the candidate list at
    the electoral committee)
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: XmlDate = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class NumberOfSeats:
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: int = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class PreferenceThreshold:
    """
    Electoral quota in % a candidate will be prefered.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: int = field(
        metadata={
            "required": True,
        }
    )


class PublicationLanguageType(Enum):
    NL = "nl"
    FY = "fy"


class RegionCategoryType(Enum):
    DEELGEMEENTE = "DEELGEMEENTE"
    GEMEENTE = "GEMEENTE"
    KIESKRING = "KIESKRING"
    PROVINCIE = "PROVINCIE"
    PROVINCIAAL_KIESKRING = "PROVINCIAAL_KIESKRING"
    PROVINCIAAL_STEMBUREAU = "PROVINCIAAL_STEMBUREAU"
    STAAT = "STAAT"
    STEMBUREAU = "STEMBUREAU"
    WATERSCHAP = "WATERSCHAP"
    WATERSCHAP_KIESKRING = "WATERSCHAP_KIESKRING"
    WATERSCHAP_GEMEENTE = "WATERSCHAP_GEMEENTE"


@dataclass(kw_only=True)
class RegionName:
    """
    Region name.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class RegisteredAppellation:
    """
    Registered appellation of the political grouping.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class RegisteredBy:
    """
    Person, who registered this appellation.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: str = field(
        default="",
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class RegisteredParty:
    """
    Registered political grouping.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    registered_appellation: str = field(
        metadata={
            "name": "RegisteredAppellation",
            "type": "Element",
            "required": True,
        }
    )
    registered_by: Optional[str] = field(
        default=None,
        metadata={
            "name": "RegisteredBy",
            "type": "Element",
        }
    )


@dataclass(kw_only=True)
class Committee:
    """
    Committee (e.g. central electoral committee)

    :ivar committee_category:
    :ivar committee_name: If not set, use region name
    :ivar accept_central_submissions:
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    committee_category: CommitteeCategoryType = field(
        metadata={
            "name": "CommitteeCategory",
            "type": "Attribute",
            "required": True,
        }
    )
    committee_name: Optional[str] = field(
        default=None,
        metadata={
            "name": "CommitteeName",
            "type": "Attribute",
        }
    )
    accept_central_submissions: Optional[bool] = field(
        default=None,
        metadata={
            "name": "AcceptCentralSubmissions",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class Contests:
    """Information in addition to the eml:ContestIdentifier.

    For submission to multiple contests (provinces for EK elections,
    electoral districts for PS, TK and EP).
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    contest: List[Contest] = field(
        default_factory=list,
        metadata={
            "name": "Contest",
            "type": "Element",
            "min_occurs": 1,
        }
    )


@dataclass(kw_only=True)
class ElectionSubcategory:
    """defines a subcategory to the ElectionCategory: PS1 (one electoral district), PS2 (more than one electoral district), AB1 (less than 19 seats), AB2 (19 seats or more), GR1 (less than 19 seats), GR2 (19 seats or more), TK, EK, BC, GC, and EP (not sub-categorized)"""
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    value: ElectionSubcategoryType = field(
        metadata={
            "required": True,
        }
    )


@dataclass(kw_only=True)
class LivingAddress(LivingAddressType):
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"


@dataclass(kw_only=True)
class RegisteredParties:
    """
    All registered names of political groupings.
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    registered_party: List[RegisteredParty] = field(
        default_factory=list,
        metadata={
            "name": "RegisteredParty",
            "type": "Element",
        }
    )


@dataclass(kw_only=True)
class ListData:
    """
    Additional OSV data for the candidate list.

    :ivar contests:
    :ivar publish_gender: denotes if the gender information shall be
        displayed in all documents
    :ivar publication_language: denotes if the language for publication,
        especially of the female gender: nl -&gt; v, fy -&gt; f
    :ivar belongs_to_set: list set number if there are several sets
        within a list group
    :ivar belongs_to_combination: list combination letter set by program
        3 (only 230b and 230c)
    """
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    contests: Optional[Contests] = field(
        default=None,
        metadata={
            "name": "Contests",
            "type": "Element",
        }
    )
    publish_gender: bool = field(
        metadata={
            "name": "PublishGender",
            "type": "Attribute",
            "required": True,
        }
    )
    publication_language: Optional[PublicationLanguageType] = field(
        default=None,
        metadata={
            "name": "PublicationLanguage",
            "type": "Attribute",
        }
    )
    belongs_to_set: Optional[int] = field(
        default=None,
        metadata={
            "name": "BelongsToSet",
            "type": "Attribute",
        }
    )
    belongs_to_combination: Optional[str] = field(
        default=None,
        metadata={
            "name": "BelongsToCombination",
            "type": "Attribute",
            "length": 1,
            "pattern": r"[a-z|A-Z]",
        }
    )


@dataclass(kw_only=True)
class Region:
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    region_name: str = field(
        metadata={
            "name": "RegionName",
            "type": "Element",
            "required": True,
        }
    )
    committee: List[Committee] = field(
        default_factory=list,
        metadata={
            "name": "Committee",
            "type": "Element",
            "max_occurs": 3,
        }
    )
    region_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "RegionNumber",
            "type": "Attribute",
        }
    )
    region_category: RegionCategoryType = field(
        metadata={
            "name": "RegionCategory",
            "type": "Attribute",
            "required": True,
        }
    )
    roman_numerals: bool = field(
        default=False,
        metadata={
            "name": "RomanNumerals",
            "type": "Attribute",
        }
    )
    frysian_export_allowed: bool = field(
        default=False,
        metadata={
            "name": "FrysianExportAllowed",
            "type": "Attribute",
        }
    )
    superior_region_number: Optional[int] = field(
        default=None,
        metadata={
            "name": "SuperiorRegionNumber",
            "type": "Attribute",
        }
    )
    superior_region_category: Optional[RegionCategoryType] = field(
        default=None,
        metadata={
            "name": "SuperiorRegionCategory",
            "type": "Attribute",
        }
    )


@dataclass(kw_only=True)
class ElectionTree:
    class Meta:
        namespace = "http://www.kiesraad.nl/extensions"

    region: List[Region] = field(
        default_factory=list,
        metadata={
            "name": "Region",
            "type": "Element",
            "min_occurs": 1,
        }
    )
