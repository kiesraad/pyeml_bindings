"""This file was generated by xsdata, v23.8, on 2023-10-17 11:34:35

Generator: DataclassGenerator
See: https://xsdata.readthedocs.io/
"""
from dataclasses import dataclass, field
from typing import Dict, List, Optional

__NAMESPACE__ = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"


@dataclass(kw_only=True)
class Function:
    """Function of the Person defined.

    Example: Managing Director, CEO, Marketing Manager, etc.

    :ivar code: Indicates the name element code defined by postal
        standard groups like ECCMA, ADIS, UN/PROLIST for postal
        services.
    :ivar other_attributes:
    :ivar content:
    """
    class Meta:
        namespace = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"

    code: Optional[object] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        }
    )


@dataclass(kw_only=True)
class NameLineType:
    """
    NameType restricted to Initials!

    :ivar type_value: Type of data defined as a free format text.
        Example: Former name, Nick name, Known as, etc. or anything else
        to help identify the line as part of the name.
    :ivar name_type: Clarifies the meaning of the element. Example:
        First Name can be Christian name, Given name, first name, etc.
    :ivar code: Indicates the name element code defined by postal
        standard groups like ECCMA, ADIS, UN/PROLIST for postal
        services.
    :ivar other_attributes:
    :ivar content:
    """
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    name_type: str = field(
        init=False,
        default="Initials",
        metadata={
            "name": "NameType",
            "type": "Attribute",
            "required": True,
        }
    )
    code: Optional[object] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )
    content: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##any",
            "mixed": True,
        }
    )


@dataclass(kw_only=True)
class OrganisationNameDetails1:
    """
    :ivar name_line: Free format text that defines the organisation name
        or parts of it.
    :ivar organisation_name: Name of the organisation. Example: MSI
        Business Solutions in "MSI Business Solutions Pty. Ltd" or the
        whole name itself
    :ivar organisation_type: Indicates the legal status of an
        organisation. Example: Pty, Ltd, GmbH, etc. Pty. Ltd. in "XYZ
        Pty. Ltd"
    :ivar type_value: Type of Organisation Name. Example: Former name,
        Known as, etc
    :ivar name_details_key_ref: Reference to another NameDetails element
        with no foreign key reinforcement. The referenced element may be
        out of the document and the document is still valid.
    :ivar other_attributes:
    """
    class Meta:
        name = "OrganisationNameDetails"

    name_line: List[NameLineType] = field(
        default_factory=list,
        metadata={
            "name": "NameLine",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    organisation_name: List["OrganisationNameDetails1.OrganisationName"] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    organisation_type: List["OrganisationNameDetails1.OrganisationType"] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationType",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    name_details_key_ref: Optional[object] = field(
        default=None,
        metadata={
            "name": "NameDetailsKeyRef",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )

    @dataclass(kw_only=True)
    class OrganisationName:
        """
        :ivar type_value: Type of Organisation name. Example: Official,
            Legal, Un-official, etc
        :ivar name_type: Defines the name type of the Organisation name.
            Example: Former name, new name, abbreviated name etc.
        :ivar code: Indicates the name element code defined by postal
            standard groups like ECCMA, ADIS, UN/PROLIST for postal
            services.
        :ivar other_attributes:
        :ivar content:
        """
        type_value: Optional[object] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )
        name_type: Optional[object] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
            }
        )
        code: Optional[object] = field(
            default=None,
            metadata={
                "name": "Code",
                "type": "Attribute",
            }
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )

    @dataclass(kw_only=True)
    class OrganisationType:
        """
        :ivar type_value: Defines the Type of Organisation Type.
            Example: Abbreviation, Legal Type, etc.
        :ivar name_type: Defines the name type of Organisation Type.
            Example: Private, Public, proprietary, etc.
        :ivar code: Indicates the name element code defined by postal
            standard groups like ECCMA, ADIS, UN/PROLIST for postal
            services.
        :ivar other_attributes:
        :ivar content:
        """
        type_value: Optional[object] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )
        name_type: Optional[object] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
            }
        )
        code: Optional[object] = field(
            default=None,
            metadata={
                "name": "Code",
                "type": "Attribute",
            }
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )


@dataclass(kw_only=True)
class PersonName:
    """Container for person name details.

    Restricted for OSV!

    :ivar name_line: Name or part of a name defined as a free format
        text.
    :ivar first_name: Represents the position of the name in a name
        string. Can be Given Name, Christian Name, Surname, family name,
        etc. Use the attribute "NameType" to define what type this name
        is.
    :ivar name_prefix: de, van, van de, von, etc. Example: Derick de
        Clarke
    :ivar last_name: Represents the position of the name in a name
        string. Can be Given Name, Christian Name, Surname, family name,
        etc. Use the attribute "NameType" to define what type this name
        is.
    :ivar type_value: Type of Name of a person. Example: Full name,
        Former Name, Known As, etc.
    :ivar code: Indicates the name element code defined by postal
        standard groups like ECCMA, ADIS, UN/PROLIST for postal
        services.
    :ivar name_details_key_ref: Reference to another NameDetails element
        with no foreign key reinforcement. The referenced element may be
        out of the document and the document is still valid.
    :ivar other_attributes:
    """
    class Meta:
        namespace = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"

    name_line: Optional[NameLineType] = field(
        default=None,
        metadata={
            "name": "NameLine",
            "type": "Element",
        }
    )
    first_name: Optional["PersonName.FirstName"] = field(
        default=None,
        metadata={
            "name": "FirstName",
            "type": "Element",
        }
    )
    name_prefix: Optional["PersonName.NamePrefix"] = field(
        default=None,
        metadata={
            "name": "NamePrefix",
            "type": "Element",
        }
    )
    last_name: "PersonName.LastName" = field(
        metadata={
            "name": "LastName",
            "type": "Element",
            "required": True,
        }
    )
    type_value: Optional[object] = field(
        default=None,
        metadata={
            "name": "Type",
            "type": "Attribute",
        }
    )
    code: Optional[object] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )
    name_details_key_ref: Optional[object] = field(
        default=None,
        metadata={
            "name": "NameDetailsKeyRef",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )

    @dataclass(kw_only=True)
    class FirstName:
        """
        :ivar type_value: Type of first name. Example: Official, Un-
            official, abbreviation, initial, etc
        :ivar name_type: Defines the name type of first name. Example:
            Given Name, Christian Name, Father's Name, etc. In some
            countries, First name could be a Family Name or a SurName.
            Use this attribute to define the type for this name.
        :ivar code: Indicates the name element code defined by postal
            standard groups like ECCMA, ADIS, UN/PROLIST for postal
            services.
        :ivar other_attributes:
        :ivar content:
        """
        type_value: Optional[object] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )
        name_type: Optional[object] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
            }
        )
        code: Optional[object] = field(
            default=None,
            metadata={
                "name": "Code",
                "type": "Attribute",
            }
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )

    @dataclass(kw_only=True)
    class NamePrefix:
        """
        :ivar type_value: Type of last name prefix. Example: Official,
            Un-official, abbreviation, initial, etc
        :ivar name_type: Defines the type of name associated with the
            NamePrefix. For example the type of name is LastName and
            this prefix is the prefix for this last name.
        :ivar code: Indicates the name element code defined by postal
            standard groups like ECCMA, ADIS, UN/PROLIST for postal
            services.
        :ivar other_attributes:
        :ivar content:
        """
        type_value: Optional[object] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )
        name_type: Optional[object] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
            }
        )
        code: Optional[object] = field(
            default=None,
            metadata={
                "name": "Code",
                "type": "Attribute",
            }
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )

    @dataclass(kw_only=True)
    class LastName:
        """
        :ivar type_value: Type of last name. Example: Official, Un-
            official, abbreviation, initial, etc
        :ivar name_type: Defines the name type of Last Name. Example:
            Father's name, Family name, Sur Name, Mother's Name, etc. In
            some countries, Last name could be the given name or first
            name.
        :ivar code: Indicates the name element code defined by postal
            standard groups like ECCMA, ADIS, UN/PROLIST for postal
            services.
        :ivar other_attributes:
        :ivar content:
        """
        type_value: Optional[object] = field(
            default=None,
            metadata={
                "name": "Type",
                "type": "Attribute",
            }
        )
        name_type: Optional[object] = field(
            default=None,
            metadata={
                "name": "NameType",
                "type": "Attribute",
            }
        )
        code: Optional[object] = field(
            default=None,
            metadata={
                "name": "Code",
                "type": "Attribute",
            }
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )


@dataclass(kw_only=True)
class JointPersonName:
    """A container to define more than one person name.

    Example: Mrs Mary Johnson and Mr.Patrick Johnson

    :ivar name_line: Name or part of the name as a free format text. If
        the name structure has to be broken down into individual
        elements, use PersonName Container.
    :ivar person_name: Use this element to specify every member
        separately.
    :ivar other_element: Use this to import/use/reference name elements
        from other namespaces
    :ivar joint_name_connector: The connector used to join more than one
        person name. Example: Mr Hunt AND Mrs Clark, where AND is the
        JointNameConnector
    :ivar code: Indicates the name element code defined by postal
        standard groups like ECCMA, ADIS, UN/PROLIST for postal
        services.
    :ivar other_attributes:
    """
    class Meta:
        namespace = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"

    name_line: List[NameLineType] = field(
        default_factory=list,
        metadata={
            "name": "NameLine",
            "type": "Element",
        }
    )
    person_name: List[PersonName] = field(
        default_factory=list,
        metadata={
            "name": "PersonName",
            "type": "Element",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    joint_name_connector: Optional[object] = field(
        default=None,
        metadata={
            "name": "JointNameConnector",
            "type": "Attribute",
        }
    )
    code: Optional[object] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class OrganisationNameDetails(OrganisationNameDetails1):
    """
    A container for organisation name details.

    :ivar organisation_former_name: Name history for the organisation
    :ivar organisation_known_as: Any other names the organisation can be
        known under.
    :ivar other_element: Use this to import/use/reference name elements
        from other namespaces
    """
    class Meta:
        namespace = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"

    organisation_former_name: List["OrganisationNameDetails.OrganisationFormerName"] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationFormerName",
            "type": "Element",
        }
    )
    organisation_known_as: List["OrganisationNameDetails.OrganisationKnownAs"] = field(
        default_factory=list,
        metadata={
            "name": "OrganisationKnownAs",
            "type": "Element",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )

    @dataclass(kw_only=True)
    class OrganisationFormerName(OrganisationNameDetails1):
        """
        :ivar other_element: Use this to import/use/reference name
            elements from other namespaces
        :ivar valid_from: The first date when the name is valid.
            Inclusive.
        :ivar valid_to: The last date when the name is valid. Inclusive.
        """
        other_element: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##other",
            }
        )
        valid_from: Optional[object] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
            }
        )
        valid_to: Optional[object] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
            }
        )

    @dataclass(kw_only=True)
    class OrganisationKnownAs(OrganisationNameDetails1):
        """
        :ivar other_element: Use this to import/use/reference name
            elements from other namespaces
        :ivar valid_from: The first date when the name is valid.
            Inclusive.
        :ivar valid_to: The last date when the name is valid. Inclusive.
        """
        other_element: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##other",
            }
        )
        valid_from: Optional[object] = field(
            default=None,
            metadata={
                "name": "ValidFrom",
                "type": "Attribute",
            }
        )
        valid_to: Optional[object] = field(
            default=None,
            metadata={
                "name": "ValidTo",
                "type": "Attribute",
            }
        )


@dataclass(kw_only=True)
class NameDetails1:
    """
    :ivar name_line: Define name as a free format text. Use this when
        the type of the entity (person or organisation) is unknown, or
        not broken into individual elements or is beyond the provided
        types.
    :ivar person_name:
    :ivar joint_person_name:
    :ivar organisation_name_details:
    :ivar party_type: Indicates the type of entity i.e described namely,
        Person or an Organisation. An Organisation could be: Club,
        Association, Company, etc
    :ivar code: Indicates the name element code defined by postal
        standard groups like ECCMA, ADIS, UN/PROLIST for postal
        services.
    :ivar other_attributes:
    """
    class Meta:
        name = "NameDetails"

    name_line: List[NameLineType] = field(
        default_factory=list,
        metadata={
            "name": "NameLine",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    person_name: Optional[PersonName] = field(
        default=None,
        metadata={
            "name": "PersonName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    joint_person_name: Optional[JointPersonName] = field(
        default=None,
        metadata={
            "name": "JointPersonName",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    organisation_name_details: Optional[OrganisationNameDetails] = field(
        default=None,
        metadata={
            "name": "OrganisationNameDetails",
            "type": "Element",
            "namespace": "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0",
        }
    )
    party_type: Optional[object] = field(
        default=None,
        metadata={
            "name": "PartyType",
            "type": "Attribute",
        }
    )
    code: Optional[object] = field(
        default=None,
        metadata={
            "name": "Code",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )


@dataclass(kw_only=True)
class NameDetails(NameDetails1):
    """
    Container for defining the name of a Person or an Organisation.

    :ivar addressee_indicator: Specific for name and address where the
        addressee is specified. eg. ATTENTION, ter attentie van (in
        Holland), etc
    :ivar function:
    :ivar dependency_name: Container for a name of a dependent person or
        organisation. Example: Ram Kumar, C/O MSI Business Solutions
        DependencyType: Person-Person/Person-Organisation Relationship
        (care of, wife of, position, etc). Can have sublement with name
        structure or reference another top-level element.
    :ivar other_element: Use this to import/use/reference name elements
        from other namespaces
    :ivar name_details_key: Key identifier for the element for not
        reinforced references from other elements. Not required to be
        unique for the document to be valid, but application may get
        confused if not unique. Extend this schema adding unique
        contraint if needed.
    """
    class Meta:
        namespace = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"

    addressee_indicator: Optional["NameDetails.AddresseeIndicator"] = field(
        default=None,
        metadata={
            "name": "AddresseeIndicator",
            "type": "Element",
        }
    )
    function: Optional[Function] = field(
        default=None,
        metadata={
            "name": "Function",
            "type": "Element",
        }
    )
    dependency_name: Optional["NameDetails.DependencyName"] = field(
        default=None,
        metadata={
            "name": "DependencyName",
            "type": "Element",
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    name_details_key: Optional[object] = field(
        default=None,
        metadata={
            "name": "NameDetailsKey",
            "type": "Attribute",
        }
    )

    @dataclass(kw_only=True)
    class AddresseeIndicator:
        """
        :ivar code: Indicates the name element code defined by postal
            standard groups like ECCMA, ADIS, UN/PROLIST for postal
            services.
        :ivar other_attributes:
        :ivar content:
        """
        code: Optional[object] = field(
            default=None,
            metadata={
                "name": "Code",
                "type": "Attribute",
            }
        )
        other_attributes: Dict[str, str] = field(
            default_factory=dict,
            metadata={
                "type": "Attributes",
                "namespace": "##other",
            }
        )
        content: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##any",
                "mixed": True,
            }
        )

    @dataclass(kw_only=True)
    class DependencyName(NameDetails1):
        """
        :ivar other_element: Use this to import/use/reference elements
            from other namespaces
        :ivar dependency_type: Description of the dependency: in trust
            of, on behalf of, etc.
        :ivar name_details_key_ref: Reference to another NameDetails
            element with no foreign key reinforcement. The referenced
            element may be out of the document and the document is still
            valid.
        """
        other_element: List[object] = field(
            default_factory=list,
            metadata={
                "type": "Wildcard",
                "namespace": "##other",
            }
        )
        dependency_type: Optional[object] = field(
            default=None,
            metadata={
                "name": "DependencyType",
                "type": "Attribute",
            }
        )
        name_details_key_ref: Optional[object] = field(
            default=None,
            metadata={
                "name": "NameDetailsKeyRef",
                "type": "Attribute",
            }
        )


@dataclass(kw_only=True)
class XNl:
    """
    Root element to define name of a Person or an Organisation  in detail.

    :ivar name_details:
    :ivar other_element: Use this to import/use/reference name elements
        from other namespaces
    :ivar version: DTD version. This attribute is not used for schema
        and exists only for DTD compatibility.
    :ivar other_attributes:
    """
    class Meta:
        name = "xNL"
        namespace = "urn:oasis:names:tc:ciq:xsdschema:xNL:2.0"

    name_details: List[NameDetails] = field(
        default_factory=list,
        metadata={
            "name": "NameDetails",
            "type": "Element",
            "min_occurs": 1,
        }
    )
    other_element: List[object] = field(
        default_factory=list,
        metadata={
            "type": "Wildcard",
            "namespace": "##other",
        }
    )
    version: Optional[object] = field(
        default=None,
        metadata={
            "name": "Version",
            "type": "Attribute",
        }
    )
    other_attributes: Dict[str, str] = field(
        default_factory=dict,
        metadata={
            "type": "Attributes",
            "namespace": "##other",
        }
    )
